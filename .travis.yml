# language target
language: cpp
compiler: gcc

# main build matrix
matrix:
  include:
    - name: "Bionic Ubuntu Linux"
      os: linux
      dist: bionic
      sudo: required
      env: TARGETOS=bionic-linux

# install, install QT5.13 from KDE Neon
install:
  # add Qt5 version 5.10+ to repositories
  - echo "deb [trusted=yes] http://archive.neon.kde.org/user/ bionic main" > ./kde_neon.list
  - sudo mv ./kde_neon.list /etc/apt/sources.list.d/kde_neon.list
  # update and upgrade
  - sudo apt-get update
  - sudo apt-get upgrade
  # force upgrade (we are using a Qt5 files from a newer distro)
  - sudo apt-get dist-upgrade -o dpkg::options::="--force-overwrite"
  # install basic deps and build deps
  - sudo apt install build-essential g++ make ffmpeg sox mplayer libnotify-dev mesa-common-dev libglvnd-dev desktop-file-utils
  # install specific Qt5 deps
  - sudo apt install qt5-default qtdeclarative5-dev qtmultimedia5-dev libqt5multimedia5-plugins libqt5opengl5-dev libqt5widgets5 qt5-qmake-bin qtbase5-dev qt5-qmake
  # show the Qt5 versions for debug
  - qtchooser -print-env
  - qmake -v
  # install debian build deps for the .deb file generation
  - sudo apt install devscripts dh-make fakeroot

# build & make & upload AppImage
script:
  - qmake CONFIG+=release PREFIX=/usr
  - make -j$(nproc)
  - make INSTALL_ROOT=appdir -j$(nproc) install ; find appdir/
  - rm -rf appdir/usr/share/metainfo # FIXME: Remove this line once go-appimage bundles appstreamcli
  - convert -resize 128x128 appdir/usr/share/icons/hicolor/scalable/apps/mystiq.svg appdir/mystiq.png
  - ( cd appdir/ && apt-get -y download ffmpeg && dpkg -x ffmpeg*.deb . && rm *.deb )
  - wget -c -nv https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - | grep "appimagetool-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
  - chmod +x ./appimagetool-*.AppImage
  - ./appimagetool-*.AppImage deploy appdir/usr/share/applications/*.desktop
  - ( cd appdir/usr/bin/ && ln -s ../../opt/qt*/plugins/* . ) # FIXME: Remove this line once go-appimage handles this correctly
  - ./appimagetool-*.AppImage appdir/

# do not build tags that we create when we upload to GitHub Releases
branches:
  except:
    - /^(?i:continuous)/
